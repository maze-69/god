library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
entity ushiftreg is
    Port ( clk : in  STD_LOGIC;
           clr : in  STD_LOGIC;
           sin : in  STD_LOGIC;
           mode : in  STD_LOGIC_VECTOR (1 downto 0);
           D : in  STD_LOGIC_VECTOR (3 downto 0);
           sout : out  STD_LOGIC;
           Q : out  STD_LOGIC_VECTOR (3 downto 0));
end ushiftreg;

architecture Behavioral of ushiftreg is
signal temp: STD_LOGIC_VECTOR (3 downto 0);
signal internal: STD_LOGIC;
signal slow_clk:std_logic;
signal clk_div:std_logic_vector(28 downto 0);

begin
	---------------------------This process is to get low clock frequency------------------------------------
	process(clk)
		begin
			if clk'event and clk='1' then clk_div<= clk_div + 1;
			end if;  
	end process;
	slow_clk<=clk_div(26);
--------------------------------------------------main code-----------------------------------------------------------

	process(slow_clk,clr)
	
	begin
	if clr='1' then temp<=(others=>'0'); internal<='0';
	elsif slow_clk'event and slow_clk='1' then
	case mode is 
				when "00"=> internal<=sin; temp<=(others=>'Z'); -- SISO
				when "01"=> internal<='Z'; temp<=sin & temp(3 downto 1); -- shift right
				when "10"=> internal<='Z'; temp<=temp(2 downto 0) & sin; -- shift left
				when "11"=> internal<='Z'; temp<=D; -- PIPO
				when OTHERS => internal<='Z'; temp<=(others=>'Z'); 
	end case;
	end if;
	end process;
	Q<= temp; 
	sout<=internal;
end Behavioral;
